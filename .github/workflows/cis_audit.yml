name: CIS Audit & Auto-Apply (Chronicler)
on:
  workflow_dispatch:
    inputs:
      week_anchor:
        description: "Week anchor used for Chronicle link (YYYY-MM-DD)"
        required: false
        default: "2025-09-24"
  schedule:
    - cron: "0 9 * * 3"  # Weekly Wed 09:00 UTC (optional; remove if not wanted)
permissions:
  contents: write
  pull-requests: write
env:
  WEEK_ANCHOR: ${{ github.event.inputs.week_anchor || '2025-09-24' }}
  BASE_BRANCH: ${{ github.event.repository.default_branch || 'main' }}
  PR_BRANCH: chore/cis-audit-auto-apply-${{ github.run_id }}
  PR_TITLE: "Chronicler Retrofill — Verified SHAs, Notices, Frontmatter, Exchange Blocks"
  PR_BODY: |
    This automated PR was generated by **CIS Audit & Auto-Apply (Chronicler)**.
    **Checklist**
    - [ ] Promotion Notices cite verified SHAs
    - [ ] CI frontmatter present on every edited file
    - [ ] Status tags use canonical (draft/in-review/matured/promoted)
    - [ ] Chronicle links correct by `week_of`
    - [ ] Exchange Blocks added where cross-platform occurred
    - [ ] SmartBuild brief patch included (/02_TEMPLATES/briefs)
    _Idempotent:_ if a block already exists, it is left unchanged.
jobs:
  run:
    name: Audit & Auto-Apply
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full history for SHAs)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Write audit+apply script
        shell: bash
        run: |
          mkdir -p scripts
          cat > scripts/cis_audit_apply.sh <<'BASH'
          #!/usr/bin/env bash
          set -euo pipefail
          canon_status_regex='draft|in-review|matured|promoted'
          TARGETS=(
            "08_CHRONICLE/2025-09-21_chronicler-newsletter-v1.0.md"
            "08_CHRONICLE/2025-09-24_week0-retrofill.md"
            "08_CHRONICLE/INDEX.md"
            "10_LLM_STREAMS/2025-09-23_Dual-Prompt_Protocol_and_Exchange_Block_Schema_Development.md"
            "10_LLM_STREAMS/2025-09-23_comet-assistant-thread-v1.md"
            "10_LLM_STREAMS/2025-09-23_dual-prompt-protocol-v1.md"
            "intel/2025-09-19-bacnet-intel.md"
            "intel/INDEX.md"
            "99_LOGS/forensic_backfill_log.md"
            "99_LOGS/forensic_backfill_log_v0.2.md"
            "99_LOGS/migration_backfill_20250917.md"
            "99_LOGS/sync_compare_2025-09-23_transcript-export.md"
            "02_TEMPLATES/emails_followups.md"
            "02_TEMPLATES/outreach_variants.md"
            "02_TEMPLATES/question_banks.md"
            "02_TEMPLATES/scripts_spoken.md"
          )
          mkdir -p out
          evidence="out/week_audit_evidence.md"
          week_anchor="${WEEK_ANCHOR:-2025-09-24}"
          today="$(date +%F)"
          timestamp="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          has_frontmatter()     { head -n1 "$1" 2>/dev/null | grep -q '^---$'; }
          has_chronicle_link()  { grep -qiE '(/)?08_CHRONICLE/|chronicle' "$1" 2>/dev/null; }
          has_promotion_notice(){ grep -qiE '^\*\*?Promotion Notice\*\*?|^Promotion Notice' "$1" 2>/dev/null; }
          has_exchange_block()  { grep -qE '^exchange_block:' "$1" 2>/dev/null; }
          status_value() {
            awk '
              /^---$/ { if (in==0) { in=1; next } else { exit } }
              in==1 && /^status:/ { print $2; exit }
            ' "$1" 2>/dev/null || true
          }
          status_is_canonical() {
            local sv="${1:-}"
            [[ -n "$sv" ]] && grep -qE "^(${canon_status_regex})$" <<<"$sv"
          }
          prepend_frontmatter_if_missing() {
            local f="$1"
            if ! has_frontmatter "$f"; then
              tmp="$(mktemp)"
              cat > "$tmp" <<EOF
          ---
          project: Career Intelligence Space
          type: doc
          status: draft
          tags: [CIS, Chronicler]
          updated: ${today}
          version: v1.0
          owner: John Wade
          ---
          EOF
              cat "$f" >> "$tmp"
              mv "$tmp" "$f"
              echo " - added frontmatter: $f"
            fi
          }
          ensure_status_canonical() {
            local f="$1"
            local sv; sv="$(status_value "$f")"
            if [[ -n "$sv" ]] && ! status_is_canonical "$sv"; then
              if command -v gsed >/dev/null 2>&1; then
                gsed -i '1,/^---$/!b; s/^status:.*/status: draft/' "$f"
              else
                sed -i.bak '1,/^---$/!{;}; s/^status:.*/status: draft/' "$f" && rm -f "$f.bak"
              fi
              echo " - normalized status to 'draft': $f"
            fi
          }
          append_chronicle_link_if_missing() {
            local f="$1"
            if ! has_chronicle_link "$f"; then
              echo -e "\n_Chronicle:_ [/08_CHRONICLE/INDEX.md#week-of-${week_anchor}]" >> "$f"
              echo " - added chronicle link: $f"
            fi
          }
          append_promotion_notice_if_missing() {
            local f="$1"
            if ! has_promotion_notice "$f"; then
              local sha
              sha="$(git log -n1 --format=%H -- "$f" 2>/dev/null || true)"
              echo -e "\n**Promotion Notice**\nSource (CI): ${f}\nEvidence (commit): [${sha}](https://github.com/${GITHUB_REPOSITORY}/commit/${sha})\nPromoted (MP): <yyyymmdd_title_v> at \nNotes: Added by CIS Audit & Auto-Apply." >> "$f"
              echo " - added promotion notice (sha=$sha): $f"
            fi
          }
          append_exchange_block_if_missing() {
            local f="$1"
            if ! echo "$f" | grep -Eq '^(10_LLM_STREAMS/|intel/|99_LOGS/)'; then
              return 0
            fi
            if ! has_exchange_block "$f"; then
              local sha
              sha="$(git log -n1 --format=%H -- "$f" 2>/dev/null || true)"
              cat >> "$f" <<EOF
          exchange_block:
            id: "eb_${today}_auto"
            timestamp: "${timestamp}"
            source_platform: "chatgpt"
            target_platform: "perplexity_comet"
            content_type: "retrofill-apply-verify"
            refs:
              - repo_path: ${f}
              - commit: "${sha}"
            summary: "Automated retrofill registration via GitHub Actions."
          EOF
              echo " - added exchange_block: $f"
            fi
          }
          audit_row() {
            local f="$1"
            local hf="No" hcl="No" hpn="No" heb="No" st="—" sc="No" sha="—" when="—" who="—" exists="No"
            if [[ -f "$f" ]]; then
              exists="Yes"
              has_frontmatter "$f" && hf="Yes"
              has_chronicle_link "$f" && hcl="Yes"
              has_promotion_notice "$f" && hpn="Yes"
              has_exchange_block "$f" && heb="Yes"
              s=$(status_value "$f"); st="${s:-—}"
              if [[ -n "${s:-}" ]] && status_is_canonical "$s"; then sc="Yes"; fi
              sha="$(git log -n1 --format=%H -- "$f" 2>/dev/null || true)"
              when="$(git log -n1 --format=%cs -- "$f" 2>/dev/null || true)"
              who="$(git log -n1 --format=%an -- "$f" 2>/dev/null || true)"
            fi
            echo "| $f | $hf | $hcl | $hpn | $heb | $st | $sc | $sha | $when | $who | $exists |"
          }
          {
            echo "# Week Audit — Evidence & QA"
            echo "_Generated: $(date -Iseconds)_"
            echo
            echo "## Evidence Table"
            echo "| path | has_frontmatter | has_chronicle_link | has_promotion_notice | has_exchange_block | status | status_canonical | last_commit_sha | last_commit_date | author | exists |"
            echo "|---|---:|---:|---:|---:|---|---:|---|---|---|---|"
          } > "$evidence"
          for f in "${TARGETS[@]}"; do
            audit_row "$f" >> "$evidence"
          done
          echo -e "\n## Auto-Apply Changes\n" >> "$evidence"
          for f in "${TARGETS[@]}"; do
            [[ -f "$f" ]] || { echo " ! missing: $f" | tee -a "$evidence"; continue; }
            changes=()
            if ! has_frontmatter "$f"; then
              prepend_frontmatter_if_missing "$f"; changes+=("frontmatter")
            fi
            s=$(status_value "$f" || true)
            if [[ -n "${s:-}" ]] && ! status_is_canonical "$s"; then
              ensure_status_canonical "$f"; changes+=("status")
            fi
            if ! has_chronicle_link "$f"; then
              append_chronicle_link_if_missing "$f"; changes+=("chronicle_link")
            fi
            if ! has_promotion_notice "$f"; then
              append_promotion_notice_if_missing "$f"; changes+=("promotion_notice")
            fi
            if echo "$f" | grep -Eq '^(10_LLM_STREAMS/|intel/|99_LOGS/)' && ! has_exchange_block "$f"; then
              append_exchange_block_if_missing "$f"; changes+=("exchange_block")
            fi
            if [[ ${#changes[@]} -gt 0 ]]; then
              echo "- $f: applied [${changes[*]}]" >> "$evidence"
            else
              echo "- $f: no changes (already compliant)" >> "$evidence"
            fi
          done
          echo -e "\n## How to Review\n1) Open the PR below.\n2) Check Files changed for expected blocks.\n3) Merge when satisfied.\n" >> "$evidence"
          BASH
          chmod +x scripts/cis_audit_apply.sh

      - name: Create working branch
        run: |
          git checkout -B "${PR_BRANCH}"

      - name: Run audit & auto-apply
        run: |
          ./scripts/cis_audit_apply.sh
          echo
          echo "==> Git status after apply:"
          git status --porcelain || true

      - name: Commit changes (if any)
        id: commit
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git add -A
            git commit -m "chore(chronicler): audit auto-apply — frontmatter/chronicle links/promotion notices/exchange blocks"
            echo "committed=true" >> "$GITHUB_OUTPUT"
          else
            echo "No changes to commit."
            echo "committed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload evidence report
        uses: actions/upload-artifact@v4
        with:
          name: week_audit_evidence
          path: out/week_audit_evidence.md
          if-no-files-found: warn
      - name: Push PR branch
        if: steps.commit.outputs.committed == 'true'
        run: |
          git push -u origin "${PR_BRANCH}"

      - name: Open Pull Request
        if: steps.commit.outputs.committed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          branch: ${{ env.PR_BRANCH }}
          base:   ${{ env.BASE_BRANCH }}
          title:  ${{ env.PR_TITLE }}
          body:   ${{ env.PR_BODY }}
          commit-message: "chore(chronicler): audit auto-apply — frontmatter/chronicle links/promotion notices/exchange blocks"
          labels: |
            chronicler
            audit
            retrofill
