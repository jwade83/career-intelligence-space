name: invariants-audit
on:
  schedule:
    - cron: '17 7 * * *'
  workflow_dispatch:
permissions:
  contents: read
jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Branch protection invariants
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          BR="main"
          resp="$(curl -sS -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "https://api.github.com/repos/$OWNER/$REPO/branches/$BR/protection")"
          strict=$(printf '%s' "$resp" | jq -r '.required_status_checks.strict // false')
          admins=$(printf '%s' "$resp" | jq -r '.enforce_admins.enabled // false')
          ctxs=$(printf '%s' "$resp" | jq -r '.required_status_checks.contexts | join(",")')
          if [ "$strict" != "true" ]; then echo "::warning::strict should be true but is $strict"; fi
          if [ "$admins" != "true" ]; then echo "::warning::enforce_admins should be true but is $admins"; fi
          if [ "$ctxs" != "links,gate" ] && [ "$ctxs" != "gate,links" ]; then echo "::warning::required contexts should be [links, gate] but are [$ctxs]"; fi
      - name: Python invariants (warn-only)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Run audit
        run: |
          python - <<'PY'
          import os, re, sys, json, subprocess
          from pathlib import Path
          def warn(msg): print(f"::warning::{msg}")
          FM = re.compile(r"^﻿?\s*---\s*
(.*?)
---\s*
?", re.DOTALL)
          def list_md(): return [str(p) for p in Path(".").rglob("*.md")]
          def fm_missing(paths):
              bad=[]; 
              for p in paths:
                  if not p.endswith(".md"): continue
                  if p.startswith(".github/"): continue
                  try: t=Path(p).read_text(encoding="utf-8", errors="ignore")
                  except Exception: continue
                  if not FM.match(t): bad.append(p)
              return bad
          def docs_antipattern(paths):
              bad=[]
              for p in paths:
                  if not p.startswith("docs/"): continue
                  if not p.endswith(".md"): continue
                  try: t=Path(p).read_text(encoding="utf-8", errors="ignore")
                  except Exception: continue
                  if re.search(r"\]\(docs/", t): bad.append(p)
              return bad
          files=list_md()
          bad_fm=fm_missing(files)
          if bad_fm: warn("Files missing front-matter: " + ", ".join(sorted(bad_fm)[:50]))
          anti=docs_antipattern(files)
          if anti: warn("docs/ link anti-pattern (use ](./...)): " + ", ".join(sorted(anti)[:50]))
          print("✅ invariants audit completed (warn-only)")
          sys.exit(0)
          PY
