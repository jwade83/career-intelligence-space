name: invariants-audit
on:
  schedule:
    - cron: '17 7 * * *'
  workflow_dispatch:
permissions:
  contents: read
jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Branch protection invariants (warn-only)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          BR="main"
          strict=$(gh api "repos/$OWNER/$REPO/branches/$BR/protection" --jq '.required_status_checks.strict // false')
          admins=$(gh api "repos/$OWNER/$REPO/branches/$BR/protection" --jq '.enforce_admins.enabled // false')
          ctxs=$(gh api "repos/$OWNER/$REPO/branches/$BR/protection" --jq '.required_status_checks.contexts | join(",")')
          [ "$strict" = "true" ] || echo "::warning::strict should be true but is $strict"
          [ "$admins" = "true" ] || echo "::warning::enforce_admins should be true but is $admins"
          case "$ctxs" in
            "links,gate"|"gate,links") : ;;
            *) echo "::warning::required contexts should be [links, gate] but are [$ctxs]";;
          esac
      - name: Python invariants (warn-only)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - name: Run audit
        run: |
          python - <<'PYX'
          import re
          from pathlib import Path
          def warn(m): print(f"::warning::{m}")
          FM = re.compile(r"^\ufeff?\s*---\s*\n(.*?)\n---\s*\n?", re.DOTALL)
          files=[str(p) for p in Path('.').rglob('*.md')]
          bad_fm=[]
          for f in files:
              if f.startswith('.github/'): continue
              t=Path(f).read_text(encoding='utf-8', errors='ignore')
              if not FM.match(t): bad_fm.append(f)
          if bad_fm: warn("Files missing front-matter: " + ", ".join(sorted(bad_fm)[:50]))
          anti=[]
          for f in files:
              if not f.startswith('docs/') or not f.endswith('.md'): continue
              t=Path(f).read_text(encoding='utf-8', errors='ignore')
              if re.search(r"\]\(docs/", t): anti.append(f)
          if anti: warn("docs/ link anti-pattern (use ](./...)): " + ", ".join(sorted(anti)[:50]))
          print("âœ… invariants audit completed (warn-only)")
          PYX
