name: Agent CI
on:
  pull_request:
  push:
    branches: [main]
jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install yq
        run: |
          # Try to install to $HOME/bin first, fallback to /usr/local/bin
          mkdir -p $HOME/bin
          curl -LO https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          if chmod +x yq_linux_amd64 && mv yq_linux_amd64 $HOME/bin/yq; then
            echo "$HOME/bin" >> $GITHUB_PATH
            echo "yq installed to $HOME/bin"
          else
            sudo install yq_linux_amd64 /usr/local/bin/yq
            rm -f yq_linux_amd64
            echo "yq installed to /usr/local/bin"
          fi
      - name: Validate agent and queue files
        id: validate
        run: |
          error_count=0
          JOURNAL_COUNT=0
          agent_count=0
          queue_count=0
          intel_manifests=0
          orchestrator_manifests=0
          
          # Find and validate agent YAML files with skip guard
          if [ -d "agents" ]; then
            shopt -s nullglob
            agent_files=(agents/*.yml agents/orchestrator.yml)
            if [ ${#agent_files[@]} -gt 0 ]; then
              for file in "${agent_files[@]}"; do
                # Skip if file doesn't exist (handles orchestrator.yml if not present)
                [ ! -f "$file" ] && continue
                agent_count=$((agent_count + 1))
                # Basic YAML syntax validation
                if ! yq eval "." "$file" > /dev/null 2>&1; then
                  echo "::error file=$file::Invalid YAML syntax"
                  error_count=$((error_count + 1))
                  continue
                fi
                # Enhanced schema validation for Synth agents
                if ! yq e 'has("schema_version")' "$file" | grep -q true; then
                  echo "::error file=$file::Missing schema_version"; error_count=$((error_count+1))
                fi
                if ! yq e 'has("definition_of_done") and (.definition_of_done | type == "!!seq")' "$file" | grep -q true; then
                  echo "::error file=$file::Missing or invalid definition_of_done (must be YAML sequence)"; error_count=$((error_count+1))
                fi
                if ! yq e 'has("name") and (.name | length > 0)' "$file" | grep -q true; then
                  echo "::error file=$file::Missing or empty name field"; error_count=$((error_count+1))
                fi
                if ! yq e 'has("description") and (.description | length > 0)' "$file" | grep -q true; then
                  echo "::error file=$file::Missing or empty description field"; error_count=$((error_count+1))
                fi
                # Agent 3 (Intel) specific validation
                agent_type=$(yq e '.type // "unknown"' "$file")
                if [ "$agent_type" = "intel" ]; then
                  if ! yq e 'has("intelligence_sources") and (.intelligence_sources | type == "!!seq")' "$file" | grep -q true; then
                    echo "::error file=$file::Intel agent missing or invalid intelligence_sources (must be YAML sequence)"; error_count=$((error_count+1))
                  fi
                  if ! yq e 'has("output_format")' "$file" | grep -q true; then
                    echo "::error file=$file::Intel agent missing output_format"; error_count=$((error_count+1))
                  fi
                  intel_manifests=$((intel_manifests + 1))
                fi
                # Agent 0 (Orchestrator) specific validation
                if [ "$agent_type" = "orchestrator" ]; then
                  orchestrator_manifests=$((orchestrator_manifests + 1))
                fi
              done
            fi
          fi
          
          # Find and validate queue YAML files in tasks directory
          if [ -d "tasks" ]; then
            shopt -s nullglob
            queue_files=(tasks/*.yml)
            QUEUE_COUNT=${#queue_files[@]}
            if [ ${#queue_files[@]} -gt 0 ]; then
              for file in "${queue_files[@]}"; do
                queue_count=$((queue_count + 1))
                # Basic YAML syntax validation
                if ! yq eval "." "$file" > /dev/null 2>&1; then
                  echo "::error file=$file::Invalid YAML syntax"
                  error_count=$((error_count + 1))
                  continue
                fi
                # Basic queue schema validation
                if ! yq e 'has("queue") and (.queue | type == "!!seq")' "$file" | grep -q true; then
                  echo "::error file=$file::Missing or invalid queue (must be YAML sequence)"; error_count=$((error_count+1))
                fi
                # Orchestrator queue validation - requires intent_text
                if yq e '.queue[] | select(has("agent_type") and .agent_type == "orchestrator")' "$file" | grep -q .; then
                  # Check each orchestrator task has intent_text
                  orchestrator_tasks=$(yq e '.queue[] | select(has("agent_type") and .agent_type == "orchestrator")' "$file" -o=j)
                  while IFS= read -r task; do
                    if ! echo "$task" | yq e 'has("intent_text") and (.intent_text | type == "!!str") and (.intent_text | length > 0)' - | grep -q true; then
                      echo "::error file=$file::Orchestrator queue task missing or invalid intent_text (must be non-empty string)"; error_count=$((error_count+1))
                    fi
                  done <<< "$orchestrator_tasks"
                fi
              done
            fi
          fi
          
          # Captain's Log journal validation
          if [ -d "99_LOGS/journal" ]; then
            shopt -s nullglob
            journal_files=(99_LOGS/journal/*.md)
            if [ ${#journal_files[@]} -gt 0 ]; then
              for file in "${journal_files[@]}"; do
                # Check filename pattern: YYYYMMDD_journal.md
                basename_file=$(basename "$file")
                if ! [[ "$basename_file" =~ ^[0-9]{8}_journal\.md$ ]]; then
                  echo "::error file=$file::Journal filename must match pattern YYYYMMDD_journal.md"
                  error_count=$((error_count + 1))
                  continue
                fi
                
                # Check required headings
                required_headings=("Daily Journal" "Actions" "Notes" "Links")
                for heading in "${required_headings[@]}"; do
                  if ! grep -q "^## *${heading}" "$file" && ! grep -q "^# *${heading}" "$file"; then
                    echo "::error file=$file::Missing required heading: ${heading}"
                    error_count=$((error_count + 1))
                  fi
                done
                
                # Check file ends with exactly one # UPGRADE
                last_lines=$(tail -n 5 "$file" | grep -v '^$')
                if [ "$(echo "$last_lines" | tail -n 1)" != "# UPGRADE" ]; then
                  echo "::error file=$file::Journal must end with exactly one line containing '# UPGRADE'"
                  error_count=$((error_count + 1))
                elif [ "$(echo "$last_lines" | grep -c '^# UPGRADE$')" -gt 1 ]; then
                  echo "::error file=$file::Journal must have exactly one '# UPGRADE' line"
                  error_count=$((error_count + 1))
                else
                  JOURNAL_COUNT=$((JOURNAL_COUNT + 1))
                fi
              done
            fi
          fi
          
          # Set outputs and summary
          echo "agent_count=$agent_count" >> $GITHUB_OUTPUT
          echo "queue_count=$queue_count" >> $GITHUB_OUTPUT
          echo "intel_manifests=$intel_manifests" >> $GITHUB_OUTPUT
          echo "orchestrator_manifests=$orchestrator_manifests" >> $GITHUB_OUTPUT
          echo "error_count=$error_count" >> $GITHUB_OUTPUT
          
          # Final gate check
          if [ $error_count -gt 0 ]; then
            echo "::error::Validation failed with $error_count errors"
            exit 1
          fi
          
          echo "Research + Synth + Intel + Orchestrator checks PASSED."
          if [ $agent_count -ge 4 ]; then
            echo "ðŸ’¡ Optimization hint: Consider consolidating agent manifests for better maintainability."
          fi
          echo "Validated $agent_count agent(s) and $queue_count queue file(s)"
          echo "Journal files validated: ${JOURNAL_COUNT:-0}" >> $GITHUB_STEP_SUMMARY
