#!/usr/bin/env python3
"""
Create GitHub Issue Template
Generates GitHub issue templates that can be manually created
"""

import json
from datetime import datetime
from pathlib import Path

def create_github_issue_templates():
    """Create GitHub issue templates for manual creation"""
    repo_root = Path(__file__).parent.parent
    results_file = repo_root / "08_CHRONICLE" / "weekly_review_results.json"
    
    if not results_file.exists():
        print("‚ùå No weekly review results found. Run weekly_review_trigger.py first.")
        return
    
    # Load results
    with open(results_file, 'r') as f:
        results = json.load(f)
    
    # Create templates directory
    templates_dir = repo_root / ".github" / "ISSUE_TEMPLATE"
    templates_dir.mkdir(exist_ok=True)
    
    # Create activation issue template
    if results['projects_ready']:
        create_activation_template(templates_dir, results['projects_ready'])
    
    # Create review issue template
    review_projects = [r for r in results['recommendations'] if r['recommendation'] != 'activate_project']
    if review_projects:
        create_review_template(templates_dir, review_projects)
    
    print(f"‚úÖ Created GitHub issue templates in {templates_dir}")

def create_activation_template(templates_dir, projects):
    """Create activation issue template"""
    template_content = f"""---
name: üöÄ Project Activation Required
about: High priority project ready for immediate activation
title: 'üöÄ ACTIVATE: [Project Name]'
labels: ['alert', 'high-priority', 'project-activation', 'weekly-review']
assignees: ['jwade83']
---

## üö® Project Activation Required

**Generated:** {datetime.now().strftime('%Y-%m-%d')}  
**Source:** Weekly Review Trigger System  
**Priority:** HIGH  
**Urgency:** IMMEDIATE

### Project Details
- **Project Name:** [Project Name]
- **Readiness Score:** [X]/4 (PERFECT)
- **Status:** Ready for immediate implementation
- **File:** [Project File]

### Trigger Conditions Met:
- ‚úÖ **Technical Readiness** - Satisfied
- ‚úÖ **Resource Availability** - Satisfied  
- ‚úÖ **Strategic Alignment** - Satisfied
- ‚úÖ **User Demand** - Satisfied

### Recommended Actions:
1. **Review implementation requirements** - Check Phase 1 specifications
2. **Allocate resources and timeline** - Schedule implementation work
3. **Begin Phase 1 implementation** - Start chat-only intelligence system
4. **Set up monitoring and feedback loops** - Track progress and outcomes

### Success Criteria:
- **Phase 1 Implementation:** Complete within 2 weeks
- **User Adoption:** Daily usage within 1 month
- **Time Savings:** 5 minutes vs. 30 minutes manual job search
- **User Satisfaction:** Natural, effortless interaction

### Implementation Checklist:
- [ ] Review project specifications
- [ ] Allocate development time
- [ ] Set up development environment
- [ ] Begin Phase 1 implementation
- [ ] Set up monitoring and feedback
- [ ] Test with users
- [ ] Deploy to production
- [ ] Document lessons learned

---
*Generated by Weekly Review Trigger System - {datetime.now().strftime('%Y-%m-%d')}*
"""
    
    template_file = templates_dir / "project_activation_template.md"
    with open(template_file, 'w') as f:
        f.write(template_content)
    
    print(f"‚úÖ Created activation template: {template_file}")

def create_review_template(templates_dir, projects):
    """Create review issue template"""
    template_content = f"""---
name: üìã Project Review Required
about: Medium priority project requiring manual review
title: 'üìã REVIEW: [Project Name]'
labels: ['alert', 'medium-priority', 'project-review', 'weekly-review']
assignees: ['jwade83']
---

## üìã Project Review Required

**Generated:** {datetime.now().strftime('%Y-%m-%d')}  
**Source:** Weekly Review Trigger System  
**Priority:** MEDIUM  
**Urgency:** NORMAL

### Project Details
- **Project Name:** [Project Name]
- **Readiness Score:** [X]/4 ([High/Moderate/Low])
- **Status:** [Review Required]
- **Action:** Review and take appropriate action

### Next Steps:
1. Review project status and requirements
2. Assess readiness score and conditions
3. Determine appropriate action
4. Update project priority if needed
5. Schedule follow-up review

### Review Checklist:
- [ ] Review project specifications
- [ ] Assess current readiness conditions
- [ ] Identify missing requirements
- [ ] Determine next actions
- [ ] Update project status
- [ ] Schedule follow-up review
- [ ] Document findings

---
*Generated by Weekly Review Trigger System - {datetime.now().strftime('%Y-%m-%d')}*
"""
    
    template_file = templates_dir / "project_review_template.md"
    with open(template_file, 'w') as f:
        f.write(template_content)
    
    print(f"‚úÖ Created review template: {template_file}")

if __name__ == "__main__":
    create_github_issue_templates()
