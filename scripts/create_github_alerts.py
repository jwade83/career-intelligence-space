#!/usr/bin/env python3
"""
Create GitHub Issues for Weekly Review Alerts
Converts weekly review results into GitHub issues for better visibility and tracking
"""

import os
import json
import requests
from datetime import datetime, timedelta
from pathlib import Path

def create_github_alerts():
    """Create GitHub issues for weekly review alerts"""
    repo_root = Path(__file__).parent.parent
    results_file = repo_root / "08_CHRONICLE" / "weekly_review_results.json"
    
    if not results_file.exists():
        print("‚ùå No weekly review results found. Run weekly_review_trigger.py first.")
        return
    
    # Load results
    with open(results_file, 'r') as f:
        results = json.load(f)
    
    # Get GitHub token and repo info
    github_token = os.getenv('GITHUB_TOKEN')
    if not github_token:
        print("‚ùå GITHUB_TOKEN not found. Cannot create GitHub issues.")
        return
    
    # Get repository info
    github_repository = os.getenv('GITHUB_REPOSITORY', 'jwade83/career-intelligence-space')
    owner, repo = github_repository.split('/')
    
    # Create issues for projects ready for activation
    for project in results['projects_ready']:
        create_activation_issue(project, owner, repo, github_token)
    
    # Create issues for projects needing review
    for rec in results['recommendations']:
        if rec['recommendation'] != 'activate_project':
            create_review_issue(rec, owner, repo, github_token)
    
    print(f"‚úÖ Created GitHub issues for {len(results['projects_ready'])} activation alerts")
    print(f"‚úÖ Created GitHub issues for {len([r for r in results['recommendations'] if r['recommendation'] != 'activate_project'])} review alerts")

def create_activation_issue(project, owner, repo, token):
    """Create GitHub issue for project activation"""
    project_name = project['project']
    if project_name == 'Unknown':
        project_name = "Jobs Radar Intelligence System"
    
    # Check if issue already exists
    if issue_exists(project_name, owner, repo, token):
        print(f"‚ö†Ô∏è Issue already exists for {project_name}")
        return
    
    # Create issue
    issue_data = {
        "title": f"üöÄ ACTIVATE: {project_name}",
        "body": f"""## üö® Project Activation Required

**Project:** {project_name}
**Readiness Score:** {project['readiness_score']}/4 (PERFECT)
**Status:** Ready for immediate implementation
**File:** `{project['file'].split('/')[-1]}`

### Trigger Conditions Met:
{format_trigger_conditions(project['trigger_conditions'])}

### Recommended Actions:
1. **Review implementation requirements** - Check Phase 1 specifications
2. **Allocate resources and timeline** - Schedule implementation work
3. **Begin Phase 1 implementation** - Start chat-only intelligence system
4. **Set up monitoring and feedback loops** - Track progress and outcomes

### Success Criteria:
- **Phase 1 Implementation:** Complete within 2 weeks
- **User Adoption:** Daily usage within 1 month
- **Time Savings:** 5 minutes vs. 30 minutes manual job search
- **User Satisfaction:** Natural, effortless interaction

---
*Generated by Weekly Review Trigger System - {datetime.now().strftime('%Y-%m-%d')}*""",
        "labels": ["alert", "high-priority", "project-activation", "weekly-review"],
        "assignees": ["jwade83"]
    }
    
    response = requests.post(
        f"https://api.github.com/repos/{owner}/{repo}/issues",
        headers={
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        },
        json=issue_data
    )
    
    if response.status_code == 201:
        issue = response.json()
        print(f"‚úÖ Created activation issue: {issue['html_url']}")
    else:
        print(f"‚ùå Failed to create issue: {response.status_code} - {response.text}")

def create_review_issue(rec, owner, repo, token):
    """Create GitHub issue for project review"""
    project_name = rec['project']
    if project_name == 'Unknown':
        project_name = "Research Task"
    
    # Check if issue already exists
    if issue_exists(project_name, owner, repo, token):
        print(f"‚ö†Ô∏è Issue already exists for {project_name}")
        return
    
    # Create issue
    issue_data = {
        "title": f"üìã REVIEW: {project_name}",
        "body": f"""## üìã Project Review Required

**Project:** {project_name}
**Readiness Score:** {rec['readiness_score']}/4 ({'High' if rec['readiness_score'] >= 3 else 'Moderate' if rec['readiness_score'] >= 2 else 'Low'})
**Status:** {rec['recommendation'].replace('_', ' ').title()}
**Action:** Review and take appropriate action

### Next Steps:
{format_next_steps(rec.get('next_steps', []))}

---
*Generated by Weekly Review Trigger System - {datetime.now().strftime('%Y-%m-%d')}*""",
        "labels": ["alert", "medium-priority", "project-review", "weekly-review"],
        "assignees": ["jwade83"]
    }
    
    response = requests.post(
        f"https://api.github.com/repos/{owner}/{repo}/issues",
        headers={
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        },
        json=issue_data
    )
    
    if response.status_code == 201:
        issue = response.json()
        print(f"‚úÖ Created review issue: {issue['html_url']}")
    else:
        print(f"‚ùå Failed to create issue: {response.status_code} - {response.text}")

def issue_exists(title, owner, repo, token):
    """Check if issue with similar title already exists"""
    response = requests.get(
        f"https://api.github.com/repos/{owner}/{repo}/issues",
        headers={
            "Authorization": f"token {token}",
            "Accept": "application/vnd.github.v3+json"
        },
        params={"state": "open", "labels": "weekly-review"}
    )
    
    if response.status_code == 200:
        issues = response.json()
        for issue in issues:
            if title.lower() in issue['title'].lower():
                return True
    
    return False

def format_trigger_conditions(conditions):
    """Format trigger conditions for issue body"""
    formatted = []
    for condition, met in conditions.items():
        status = "‚úÖ" if met else "‚ùå"
        condition_name = condition.replace('_', ' ').title()
        formatted.append(f"- {status} **{condition_name}** - {'Satisfied' if met else 'Not met'}")
    return "\n".join(formatted)

def format_next_steps(steps):
    """Format next steps for issue body"""
    if not steps:
        return "1. Review project status and requirements\n2. Take appropriate action based on readiness score"
    
    formatted = []
    for i, step in enumerate(steps, 1):
        formatted.append(f"{i}. {step}")
    return "\n".join(formatted)

if __name__ == "__main__":
    create_github_alerts()
